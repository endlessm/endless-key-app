name: CI

on:
  create:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2019

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          architecture: 'x86'

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Install python requirements
        run: |
          pip install wheel

      - name: Checkout pyinstaller
        uses: actions/checkout@v2
        with:
          repository: pyinstaller/pyinstaller
          path: pyinstaller
          ref: v5.1

      - name: Build pyinstaller bootloader
        run: |
          python waf all --target-arch=32bit
        working-directory: pyinstaller/bootloader

      - name: Install pyinstaller
        run: |
          python setup.py install
        working-directory: pyinstaller
        env:
          PYINSTALLER_COMPILE_BOOTLOADER: 1

      - name: Prep kolibri dist
        run: |
          pip install kolibri --target="src"

      - name: Add kolibri_zim_plugin to Kolibri's dist packages
        run: |
          pip install kolibri-zim-plugin --target="src\kolibri\dist"

      - name: Add kolibri_explore_plugin to Kolibri's dist packages
        run: |
          pip install kolibri-explore-plugin --target="src\kolibri\dist"

      - uses: robinraju/release-downloader@v1.3
        with:
          repository: "endlessm/kolibri-explore-plugin"
          latest: true
          fileName: "apps-bundle.zip"

      - name: Add apps-bundle to Kolibri's dist packages
        run: |
          7z x apps-bundle.zip -osrc/apps-bundle

      - name : Patch Kolibri's server code to avoid Windows firewall prompts
        run: |
          C:\msys64\usr\bin\patch.exe src\kolibri\utils\server.py patches\kolibri-utils-server.diff

      - name: Build
        run: |
          pyinstaller.exe --noconfirm main.spec

      - name: Install electron-forge
        working-directory: kolibri-electron
        run: yarn global add @electron-forge/cli

      - name: Install electron dependencies
        working-directory: kolibri-electron
        run: yarn install

      - name: Build electron app
        working-directory: kolibri-electron
        run: yarn make --arch=ia32

      - name: Kolibri cleanup
        run: |
          $KOLIBRI_MODULE_PATH = "src/kolibri"

          & ./cleanup-unused-locales.py -l `
          ${KOLIBRI_MODULE_PATH}/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/conf/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/admin/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/admindocs/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/auth/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/contenttypes/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/flatpages/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/gis/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/humanize/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/postgres/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/redirects/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/sessions/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/sites/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django_filters/locale `
          ${KOLIBRI_MODULE_PATH}/dist/mptt/locale `
          ${KOLIBRI_MODULE_PATH}/dist/rest_framework/locale

          rm -r -fo `
          ${KOLIBRI_MODULE_PATH}/dist/cext/cp27, `
          ${KOLIBRI_MODULE_PATH}/dist/cext/cp34, `
          ${KOLIBRI_MODULE_PATH}/dist/cext/cp35, `
          ${KOLIBRI_MODULE_PATH}/dist/cext/cp36, `
          ${KOLIBRI_MODULE_PATH}/dist/cext/cp38, `
          ${KOLIBRI_MODULE_PATH}/dist/cext/cp39, `
          ${KOLIBRI_MODULE_PATH}/dist/cext/*/*Linux*

          rm -r -fo `
          ${KOLIBRI_MODULE_PATH}/dist/cheroot/test, `
          ${KOLIBRI_MODULE_PATH}/dist/colorlog/tests, `
          ${KOLIBRI_MODULE_PATH}/dist/django_js_reverse/tests, `
          ${KOLIBRI_MODULE_PATH}/dist/future/backports/test, `
          ${KOLIBRI_MODULE_PATH}/dist/future/moves/test, `
          ${KOLIBRI_MODULE_PATH}/dist/ipware/tests, `
          ${KOLIBRI_MODULE_PATH}/dist/magicbus/test, `
          ${KOLIBRI_MODULE_PATH}/dist/more_itertools/tests, `
          ${KOLIBRI_MODULE_PATH}/dist/past/tests, `
          ${KOLIBRI_MODULE_PATH}/dist/py2only, `
          ${KOLIBRI_MODULE_PATH}/dist/sqlalchemy/testing

      - name: Create kolibri-windows
        run: |
          mv kolibri-electron/out/kolibri-electron-win32-ia32 kolibri-windows

          mv src/kolibri dist/Kolibri/kolibri
          mv dist/Kolibri kolibri-windows/resources/app/src/
          mv src/apps-bundle kolibri-windows/resources/app/src/

      - name: Compress
        run: Compress-Archive -Path kolibri-windows\* -DestinationPath kolibri-windows.zip
        shell: pwsh

      - name: Upload ZIP
        uses: actions/upload-artifact@v2
        with:
          name: "kolibri-windows.zip"
          path: "kolibri-windows.zip"


  package:
    needs: build
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Need to fetch everything so that 'git describe' can see the tags
          fetch-depth: 0

      - name: Download the kolibri-windows.zip
        uses: actions/download-artifact@v3
        with:
          name: kolibri-windows.zip

      - name: Packaging
        run: |
          Expand-Archive kolibri-windows.zip -DestinationPath kolibri-windows

          $describe = (git describe --always --tags --long --match 'v*')
          $ver_arr = $describe -split '[-v]'
          $ver_str = $ver_arr[1] + "." + $ver_arr[2]

          echo "Set package's version as $ver_str"
          $src = "build_winapp/appxmanifest.xml"
          $dst = "kolibri-windows/appxmanifest.xml"
          [xml]$xmlDoc = Get-Content $src
          $xmlDoc.Package.Identity.Version = $ver_str
          $xmlDoc.Save($dst)

          Copy-Item -Path "build_winapp/assets" -Destination "kolibri-windows/" -recurse
          & "${Env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\makeappx.exe" pack /d kolibri-windows /p endlesskey.appx

      - name: Upload unsigned package
        uses: actions/upload-artifact@v2
        with:
          name: "endlesskey.appx"
          path: "endlesskey.appx"

      - name: Sign artifact for testing
        id: sign_for_testing
        if: startsWith(github.ref, 'refs/tags/') == false
        shell: pwsh
        env:
          SIGN_PHRASE: ${{ secrets.SELFSIGN_PHRASE }}
        run: |
          & "${Env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\signtool.exe" `
            sign /fd SHA256 /a /f build_winapp/selfsign.pfx /p $env:SIGN_PHRASE endlesskey.appx
          mv endlesskey.appx endlesskey.selfsigned.appx

      - name: Upload self-signed package for testing
        if: steps.sign_for_testing.outcome == 'success'
        uses: actions/upload-artifact@v2
        with:
          name: "endlesskey.selfsigned.appx"
          path: "endlesskey.selfsigned.appx"


  sign_binaries_for_EK_USB_image:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest

    steps:
      - name: Download the kolibri-windows.zip
        uses: actions/download-artifact@v3
        with:
          name: kolibri-windows.zip

      - name: Sign the binaries
        id: sing_binaries
        shell: pwsh
        env:
          SIGNPATH_ORG_ID: ${{ secrets.SIGNPATH_ORGANIZATION_ID }}
          SIGNPATH_USER_TOKEN: ${{ secrets.SIGNPATH_API_TOKEN }}
        run: |
          Expand-Archive kolibri-windows.zip -DestinationPath kolibri-windows

          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -name SignPath
          Submit-SigningRequest `
            -CIUserToken $env:SIGNPATH_USER_TOKEN `
            -OrganizationId $env:SIGNPATH_ORG_ID `
            -ProjectSlug Endless_Apps `
            -SigningPolicySlug Endless_Apps_Signing_for_Endless_USB_Key `
            -ArtifactConfigurationSlug Binaries_for_Endless_USB_Key `
            -InputArtifactPath kolibri-windows/kolibri-electron.exe `
            -OutputArtifactPath kolibri-electron.signed.exe `
            -WaitForCompletion

          Submit-SigningRequest `
            -CIUserToken $env:SIGNPATH_USER_TOKEN `
            -OrganizationId $env:SIGNPATH_ORG_ID `
            -ProjectSlug Endless_Apps `
            -SigningPolicySlug Endless_Apps_Signing_for_Endless_USB_Key `
            -ArtifactConfigurationSlug Binaries_for_Endless_USB_Key `
            -InputArtifactPath kolibri-windows/resources/app/src/Kolibri/Kolibri.exe `
            -OutputArtifactPath Kolibri.signed.exe `
            -WaitForCompletion

          mv kolibri-electron.signed.exe kolibri-windows/kolibri-electron.exe
          mv Kolibri.signed.exe kolibri-windows/resources/app/src/Kolibri/Kolibri.exe

          rm kolibri-windows.zip

      - name: Compress
        run: Compress-Archive -Path kolibri-windows\* -DestinationPath kolibri-windows.zip
        shell: pwsh

      - name: Release
        uses: softprops/action-gh-release@v1
        if: steps.sing_binaries.outcome == 'success'
        with:
          files: kolibri-windows.zip


  push_to_MS_store:
    needs: package
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest

    steps:
      - name: Download the package
        uses: actions/download-artifact@v3
        with:
          name: endlesskey.appx

      - name: Checkout StoreBroker
        uses: actions/checkout@v3
        with:
          repository: microsoft/StoreBroker
          path: StoreBroker

      - name: Create and push the Application Payload to Package Flight on Microsoft store
        shell: pwsh
        env:
          MS_TENANT_ID: ${{ secrets.MSPARTNER_TENANTID }}
          MS_CLIENT_ID: ${{ secrets.MSPARTNER_CLIENTID }}
          MS_CLIENT_PWD: ${{ secrets.MSPARTNER_CLIENTPWD }}
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name StoreBroker

          $APP_ID = "9PDLJFW5D4JR"
          $SubmissionRoot = "MSSubmission"

          $PWD = ConvertTo-SecureString $env:MS_CLIENT_PWD -AsPlainText -Force
          $Credentials = New-Object System.Management.Automation.PSCredential ($env:MS_CLIENT_ID, $PWD)
          Set-StoreBrokerAuthentication -TenantId $env:MS_TENANT_ID -Credential $Credentials -Verbose

          New-Item -Path "MSAppPayload" -ItemType Directory

          # Get current config and PDPs from Microsoft store
          New-StoreBrokerConfigFile -Path "MSAppPayload/SBConfig.json" -AppId $APP_ID
          $release_str = Get-Date -Format "yyyyMMdd"
          .\StoreBroker\Extensions\ConvertFrom-ExistingSubmission.ps1 -AppId $APP_ID -Release $release_str -OutPath "MSAppPayload/PDPs"

          # Wipe out the Release string in PDP.xml to avoid the release version folder
          [xml]$xmlDoc = Get-Content "MSAppPayload/PDPs/en-us/PDP.xml"
          $xmlDoc.ProductDescription.Release = ""
          $xmlDoc.Save( "MSAppPayload/PDPs/en-us/PDP.xml" )

          echo "Going to create dummy screenshots for Application Payload creation:"
          $xmlDoc.ProductDescription.ScreenshotCaptions.Caption | ForEach-Object {
            $dummy_screenshot = "MSAppPayload/PDPs/en-us/" + $_.DesktopImage
            echo $dummy_screenshot
            echo NULL > $dummy_screenshot
          }

          New-SubmissionPackage `
            -ConfigPath "MSAppPayload/SBConfig.json" `
            -PDPRootPath "MSAppPayload/PDPs" `
            -ImagesRootPath "MSAppPayload/PDPs" `
            -AppxPath endlesskey.appx `
            -MediaFallbackLanguage en-US `
            -OutPath $SubmissionRoot `
            -OutName endlesskey `
            -Verbose

          $FLIGHT_NAME = "Alpha Test Flight"
          $flight = Get-ApplicationFlights -AppId $APP_ID | Where-Object { $_.friendlyName -eq $FLIGHT_NAME }

          Update-ApplicationFlightSubmission `
            -AppId $APP_ID `
            -FlightId $flight.flightId `
            -SubmissionDataPath "$SubmissionRoot/endlesskey.json" `
            -PackagePath "$SubmissionRoot/endlesskey.zip" `
            -ReplacePackages `
            -AutoCommit `
            -Force `
            -Verbose
