name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2019

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Need to fetch everything so that 'git describe' can see the tags
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          architecture: 'x86'

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Install python requirements
        run: |
          pip install wheel

      - name: Checkout pyinstaller
        uses: actions/checkout@v2
        with:
          repository: pyinstaller/pyinstaller
          path: pyinstaller
          ref: v5.1

      - name: Build pyinstaller bootloader
        run: |
          python waf all --target-arch=32bit
        working-directory: pyinstaller/bootloader

      - name: Install pyinstaller
        run: |
          python setup.py install
        working-directory: pyinstaller
        env:
          PYINSTALLER_COMPILE_BOOTLOADER: 1

      - name: Prep kolibri dist
        run: |
          pip install kolibri --target="src"

      - name: Add kolibri_zim_plugin to Kolibri's dist packages
        run: |
          pip install kolibri-zim-plugin --target="src\kolibri\dist"

      - name: Add kolibri_explore_plugin to Kolibri's dist packages
        run: |
          pip install kolibri-explore-plugin --target="src\kolibri\dist"

      - uses: robinraju/release-downloader@v1.3
        with:
          repository: "endlessm/kolibri-explore-plugin"
          latest: true
          fileName: "apps-bundle.zip"

      - name: Add apps-bundle to Kolibri's dist packages
        run: |
          7z x apps-bundle.zip -osrc/apps-bundle

      - name : Patch Kolibri's server code to avoid Windows firewall prompts
        run: |
          C:\msys64\usr\bin\patch.exe src\kolibri\utils\server.py patches\kolibri-utils-server.diff

      - name: Build
        run: |
          pyinstaller.exe --noconfirm main.spec

      - name: Install electron-forge
        working-directory: kolibri-electron
        run: yarn global add @electron-forge/cli

      - name: Install electron dependencies
        working-directory: kolibri-electron
        run: yarn install

      - name: Build electron app
        working-directory: kolibri-electron
        run: yarn make --arch=ia32

      - name: Kolibri cleanup
        run: |
          $KOLIBRI_MODULE_PATH = "src/kolibri"

          & ./cleanup-unused-locales.py -l `
          ${KOLIBRI_MODULE_PATH}/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/conf/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/admin/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/admindocs/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/auth/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/contenttypes/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/flatpages/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/gis/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/humanize/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/postgres/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/redirects/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/sessions/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django/contrib/sites/locale `
          ${KOLIBRI_MODULE_PATH}/dist/django_filters/locale `
          ${KOLIBRI_MODULE_PATH}/dist/mptt/locale `
          ${KOLIBRI_MODULE_PATH}/dist/rest_framework/locale

          rm -r -fo `
          ${KOLIBRI_MODULE_PATH}/dist/cext/cp27, `
          ${KOLIBRI_MODULE_PATH}/dist/cext/cp34, `
          ${KOLIBRI_MODULE_PATH}/dist/cext/cp35, `
          ${KOLIBRI_MODULE_PATH}/dist/cext/cp36, `
          ${KOLIBRI_MODULE_PATH}/dist/cext/cp38, `
          ${KOLIBRI_MODULE_PATH}/dist/cext/cp39, `
          ${KOLIBRI_MODULE_PATH}/dist/cext/*/*Linux*

          rm -r -fo `
          ${KOLIBRI_MODULE_PATH}/dist/cheroot/test, `
          ${KOLIBRI_MODULE_PATH}/dist/colorlog/tests, `
          ${KOLIBRI_MODULE_PATH}/dist/django_js_reverse/tests, `
          ${KOLIBRI_MODULE_PATH}/dist/future/backports/test, `
          ${KOLIBRI_MODULE_PATH}/dist/future/moves/test, `
          ${KOLIBRI_MODULE_PATH}/dist/ipware/tests, `
          ${KOLIBRI_MODULE_PATH}/dist/magicbus/test, `
          ${KOLIBRI_MODULE_PATH}/dist/more_itertools/tests, `
          ${KOLIBRI_MODULE_PATH}/dist/past/tests, `
          ${KOLIBRI_MODULE_PATH}/dist/py2only, `
          ${KOLIBRI_MODULE_PATH}/dist/sqlalchemy/testing

      - name: Create kolibri-windows
        run: |
          mv kolibri-electron/out/kolibri-electron-win32-ia32 kolibri-windows

          mv src/kolibri dist/Kolibri/kolibri
          mv dist/Kolibri kolibri-windows/resources/app/src/
          mv src/apps-bundle kolibri-windows/resources/app/src/

      - name: Compress
        run: Compress-Archive -Path kolibri-windows\* -DestinationPath kolibri-windows.zip
        shell: pwsh

      - name: Packaging
        run: |
          $describe = (git describe --always --tags --long --match 'v*')
          $ver_arr = $describe -split '[-v]'
          $ver_str = $ver_arr[1] + "." + $ver_arr[2]

          echo "Set package's version as $ver_str"
          $src = "build_winapp/appxmanifest.xml"
          $dst = "kolibri-windows/appxmanifest.xml"
          [xml]$xmlDoc = Get-Content $src
          $xmlDoc.Package.Identity.Version = $ver_str
          $xmlDoc.Save($dst)

          Copy-Item -Path "build_winapp/assets" -Destination "kolibri-windows/" -recurse
          & "${Env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\makeappx.exe" pack /d kolibri-windows /p endlesskey.appx

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            kolibri-windows.zip
            endlesskey.appx
